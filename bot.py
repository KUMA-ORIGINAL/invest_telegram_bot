import os

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiohttp import web
from dotenv import load_dotenv, find_dotenv

import cryptomus
import db

from aiogram import Dispatcher, Bot, executor, types

from keyboards import get_kb, get_video_cards_ikb, get_profile_kb, get_video_card_ikb
from web_app import routes

load_dotenv(find_dotenv())

storage = MemoryStorage()
bot = Bot(token=os.getenv("TOKEN"), parse_mode='HTML')
dp = Dispatcher(bot, storage=storage)

app = web.Application()
app['bot'] = bot
app.add_routes(routes)


async def on_startup(dp):
    print('bot online')
    db.sql_start()
    await bot.set_webhook(os.getenv('WEBHOOK_URL'))


async def on_shutdown(dp):
    await bot.delete_webhook()

video_cards = ((1, 25), (2, 50), (3, 100), (4, 250), (5, 500), (6, 1000))


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message) -> None:
    user_id = message.from_user.id
    if not await db.get_user(user_id):
        referrer_id = str(message.text[7:])
        if referrer_id != '':
            if referrer_id != str(message.from_user.id):
                await db.add_user(user_id, referrer_id)
                try:
                    await bot.send_message(referrer_id, '–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π '
                                                        '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!')
                except:
                    pass
            else:
                await db.create_user(user_id)
                await db.add_user(user_id)
                await bot.send_message(message.from_user.id, '–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–Ω–æ–π '
                                                             '—Å—Å—ã–ª–∫–µ!')
        else:
            await db.create_user(user_id)
            await db.add_user(user_id)
    await bot.send_message(message.from_user.id, '‚ÑπÔ∏è–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –º–µ–Ω—é\n\nüì¢ –ù–æ–≤–æ—Å—Ç–∏ ‚Äî @RiseGame_CIS',
                           reply_markup=get_kb())


@dp.message_handler(text='üîô –ú–µ–Ω—é')
async def cmd_start(message: types.Message) -> None:
    await bot.send_message(message.from_user.id, '‚ÑπÔ∏è–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –º–µ–Ω—é\n\nüì¢ –ù–æ–≤–æ—Å—Ç–∏ ‚Äî @RiseGame_CIS',
                           reply_markup=get_kb())


@dp.message_handler(text=['üìà–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å'])
async def cmd_invest(message: types.Message) -> None:
    await bot.send_message(message.from_user.id, 'üó≥ <b>–í—ã–±–∏—Ä–∞–π—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É:</b>',
                           reply_markup=get_video_cards_ikb())


@dp.message_handler(text=['üíª–ú–æ–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã'])
async def cmd_video_card(message: types.Message) -> None:
    await bot.send_message(message.from_user.id, 'üó≥ <b>–í—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã:</b>')


@dp.callback_query_handler(lambda c: c.data.startswith('level'))
async def callback_video_cards(callback: types.CallbackQuery) -> None:
    await callback.message.edit_text(f'üíª –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ {video_cards[int(callback.data[-1])][0]} <b>LEVEL</b> \n\n'
                                     f'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {video_cards[int(callback.data[-1])][1]}$ \n\n'
                                     f'üìà –ü—Ä–∏–±—ã–ª—å: 140%',
                                     reply_markup=get_video_card_ikb())
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('video-card'))
async def callback_video_card(callback: types.CallbackQuery) -> None:
    if callback.data == 'video-card_buy':
        await callback.answer('–ø–æ–∫—É–ø–∫–∞')
    else:
        await callback.message.edit_text('üó≥ <b>–í—ã–±–∏—Ä–∞–π—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É:</b>',
                                         reply_markup=get_video_cards_ikb())
        await callback.answer()


@dp.message_handler(text=['üíº–ü—Ä–æ—Ñ–∏–ª—å'])
async def cmd_profile(message: types.Message) -> None:
    user_data = await db.get_user(message.from_user.id)
    for data in user_data:
        await bot.send_message(message.from_user.id, f'<b>üíº –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n'
                               f'‚ö°Ô∏è <b>ID –≤ –±–æ—Ç–µ:</b> {data[0]}\n'
                               f'‚ö°Ô∏è <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {data[1]}\n\n'
                               f'üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n'
                               f'üëâüèª <b>–ë–∞–ª–∞–Ω—Å:</b> {data[2]}$\n'
                               f'üëâüèª <b>–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ–≥–æ:</b> {data[3]}$\n'
                               f'üëâüèª <b>–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–±—ã–ª–∏ –≤—Å–µ–≥–æ:</b> {data[4]}$\n\n'
                               f'–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º ‚Äî @risegame_help',
                               reply_markup=get_profile_kb())


@dp.message_handler(text=['üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'])
async def cmd_referal(message: types.Message):
    count_referals = await db.count_referals(message.from_user.id)
    await bot.send_message(message.from_user.id, f'üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n\n'
                                                 f'‚ö°Ô∏è –ö–æ–ª-–≤–æ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {count_referals}\n'
                                                 f'‚ö°Ô∏è –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {0}$\n\n'
                                                 f'üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n'
                                                 f'‚ûñ https://t.me/{os.getenv("BOT_NICKNAME")}?start={message.from_user.id}')


class CodeStateGroup(StatesGroup):
    amount = State()


@dp.message_handler(text=['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'])
async def cmd_replenish_balance(message: types.Message):
    await bot.send_message(message.from_user.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ USD (–¥–æ–ª–ª–∞—Ä–∞—Ö):\n\n"
                                                 "* –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")
    await CodeStateGroup.amount.set()


@dp.message_handler(state=CodeStateGroup.amount)
async def check_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['amount'] = message.text
        if data['amount'].isalpha():
            await bot.send_message(message.from_user.id, '‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n\n'
                                                         '* –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ')
            await state.finish()
            await CodeStateGroup.amount.set()
            return
        if int(data['amount']) < 10:
            await bot.send_message(message.from_user.id, '‚ùóÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 10$\n\n'
                                                         '* –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ')
            await state.finish()
            await CodeStateGroup.amount.set()
            return
    response = await cryptomus.create_payment(data['amount'], '10')
    if not response:
        await bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞!')
        return
    print(response)
    await db.create_cryptomus(response, message.from_user.id)
    await bot.send_message(message.from_user.id, response.result.url)

    await state.finish()

if __name__ == '__main__':
    executor.set_webhook(dispatcher=dp,
                         webhook_path=os.getenv('WEBHOOK_PATH'),
                         skip_updates=True,
                         on_startup=on_startup,
                         on_shutdown=on_shutdown,
                         web_app=app)
    web.run_app(app, port=os.getenv('WEBHOOK_PORT'), host=os.getenv('WEBHOOK_HOST'))
